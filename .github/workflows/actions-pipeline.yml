# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    environment: TEST
#    services:
#      mysql_db:
#        image: mysql:8.0
#        env:
#          MYSQL_PASSWORD: ${{ vars.MYSQL_PASSWORD }}
#          MYSQL_ROOT_PASSWORD: ${{ vars.MYSQL_ROOT_PASSWORD }}
#          MYSQL_USE: ${{ vars.MYSQL_USER }}
#          MYSQL_HOST: ${{ vars.MYSQL_HOST }}
#          MYSQL_PORT: ${{ vars.MYSQL_PORT }}
#          MYSQL_DATABASE: ${{ vars.MYSQL_DATABASE }}
#        ports:
#          - 3306:3306
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.

      - name: Create env file
        run: |
          touch .env
          echo MYSQL_PASSWORD=${{ vars.MYSQL_PASSWORD }} >> .env
          echo MYSQL_ROOT_PASSWORD=${{ vars.MYSQL_ROOT_PASSWORD }} >> .env
          echo MYSQL_USER=${{ vars.MYSQL_USER }} >> .env
          echo MYSQL_HOST=${{ vars.MYSQL_HOST }} >> .env
          echo MYSQL_PORT=${{ vars.MYSQL_PORT }} >> .env
          echo MYSQL_DATABASE=${{ vars.MYSQL_DATABASE }} >> .env
          echo IEXCLOUD_API_KEY=${{ vars.IEXCLOUD_API_KEY }} >> .env
          echo CELERY_BROKER_URL=${{ vars.CELERY_BROKER_URL }} >> .env
          echo CELERY_RESULT_BACKEND=${{ vars.CELERY_RESULT_BACKEND }} >> .env
          echo REDIS_HOST=${{ vars.REDIS_HOST }} >> .env

      - name: Build and start Docker Compose
        run: |
          docker compose build
          docker compose up -d
          

      - name: Wait for app to start
        run: |
          docker compose exec web bash -c "cd app && alembic upgrade head"
